% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/predict.ptLasso.R
\name{predict.ptLasso}
\alias{predict.ptLasso}
\title{Predict using a ptLasso object.}
\usage{
\method{predict}{ptLasso}(
  object,
  xtest,
  groupstest = NULL,
  ytest = NULL,
  type = c("link", "response", "class"),
  s = "lambda.min",
  gamma = "gamma.min",
  return.link = FALSE,
  ...
)
}
\arguments{
\item{object}{Fitted \code{"ptLasso"} object.}

\item{xtest}{Input matrix, matching the form used by \code{"ptLasso"} for model training.}

\item{groupstest}{A vector indicating to which group each observation belongs. Coding should match that used for model training. Will be NULL for target grouped data.}

\item{ytest}{Response variable. Optional. If included, \code{"predict"} will compute performance measures for xtest using \code{"type.measure"} from the cvfit object.}

\item{type}{Type of prediction required. Type '"link"' gives the linear predictors for '"binomial", '"multinomial"' or '"cox"' models; for '"gaussian"' models it gives the fitted values. Type '"response"' gives the fitted probabilities for '"binomial"' or '"multinomial"', and the fitted relative-risk for '"cox"'; for '"gaussian"' type '"response"' is equivalent to type '"link"'. Note that for '"binomial"' models, results are returned only for the class corresponding to the second level of the factor response. Type '"class"' applies only to '"binomial"' or '"multinomial"' models, and produces the class label corresponding to the maximum probability.}

\item{s}{Value of the penalty parameter 'lambda' at which predictions are required. Will use the same lambda for all models; can be a numeric value, '"lambda.min"' or '"lambda.1se"'. Default is '"lambda.min"'.}

\item{gamma}{For use only when 'relax = TRUE' was specified during training. Value of the penalty parameter 'gamma' at which predictions are required. Will use the same gamma for all models; can be a numeric value, '"gamma.min"' or '"gamma.1se"'. Default is '"gamma.min"'.}

\item{return.link}{If \code{TRUE}, will additionally return the linear link for the overall, pretrained and individual models: \code{linkoverall}, \code{linkpre} and \code{linkind}.}

\item{\dots}{other arguments to be passed to the \code{"predict"} function.}
}
\value{
A list containing the requested predictions. If \code{ytest} is included, will also return error measures.
\item{call}{The call that produced this object.}
\item{alpha}{The value(s) of alpha used to generate predictions. Will be the same alpha used to in model training.}
\item{yhatoverall}{Predictions from the overall model.}
\item{yhatind}{Predictions from the individual models.}
\item{yhatpre}{Predictions from the pretrained models.}
\item{supoverall}{Indices of the features selected by the overall model.}
\item{supind}{Union of the indices of the features selected by the individual models.}
\item{suppre.common}{Features selected in the first stage of pretraining.}
\item{suppre.individual}{Union of the indices of the features selected by the pretrained models, without the features selected in the first stage.}
\item{type.measure}{If \code{ytest} is supplied, the string name of the computed performance measure.}
\item{erroverall}{If \code{ytest} is supplied, performance for the overall model. This is a named vector containing performance for (1) the entire dataset, (2) the average performance across groups, (3) the average performance across groups weighted by group size and (4) group-specific performance.}
\item{errind}{If \code{ytest} is supplied, performance for the overall model. As described in \code{erroverall}.}
\item{errpre}{If \code{ytest} is supplied, performance for the overall model. As described in \code{erroverall}.}
\item{linkoverall}{If\code{return.link} is TRUE, return the linear link from the overall model.}
\item{linkind}{If\code{return.link} is TRUE, return the linear link from the individual models.}
\item{linkpre}{If\code{return.link} is TRUE, return the linear link from the pretrained models.}
}
\description{
Return predictions and performance measures for a test set.
}
\examples{
# Gaussian example
set.seed(1234)
out = gaussian.example.data()
x = out$x; y=out$y; groups = out$group

outtest = gaussian.example.data()
xtest=outtest$x; ytest=outtest$y; groupstest=outtest$groups

fit = ptLasso(x, y, groups = groups, alpha = 0.5, family = "gaussian", type.measure = "mse")
pred = predict(fit, xtest, groupstest, ytest=ytest)
pred

}
